name: Tessellating PBR Generator Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.9'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm run test:unit
      env:
        CI: true
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup test environment
      run: |
        echo "Setting up mock API server..."
        npm run test:setup
    
    - name: Run integration tests
      run: npm run test:integration
      env:
        OPENAI_TEST_KEY: ${{ secrets.OPENAI_TEST_KEY }}
        TEST_MODE: integration
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: test-results/

  texture-validation-tests:
    name: Texture Validation Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install image processing dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev python3-opencv
        pip install pillow numpy opencv-python
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run texture validation tests
      run: npm run test:texture-validation
    
    - name: Upload visual test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: failed-texture-validations
        path: test-results/visual-failures/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run performance benchmarks
      run: npm run test:performance
      env:
        PERFORMANCE_TEST: true
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'customBiggerIsBetter'
        output-file-path: test-results/benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        alert-threshold: '110%'
        comment-on-alert: true
        fail-on-alert: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run npm audit
      run: npm audit --production
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    
    - name: Run OWASP dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'tessellating-pbr-generator'
        path: '.'
        format: 'HTML'

  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup K6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run load tests
      run: |
        k6 run tests/load/stress-test.js
        k6 run tests/load/spike-test.js
    
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: load-test-results
        path: test-results/load-tests/

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: texture-validation-tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run visual regression tests
      run: npm run test:visual-regression
      env:
        PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
    
    - name: Upload visual diff results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: visual-regression-diffs
        path: test-results/visual-diffs/

  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, texture-validation-tests, performance-tests]
    if: always()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: all-test-results
    
    - name: Generate consolidated report
      run: |
        npm run test:generate-report
    
    - name: Publish test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: 'test-results/**/*.xml'
        reporter: java-junit
    
    - name: Comment PR with results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const testSummary = fs.readFileSync('test-results/summary.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: testSummary
          });

  deploy-test-environment:
    name: Deploy Test Environment
    runs-on: ubuntu-latest
    needs: [test-report]
    if: github.ref == 'refs/heads/develop' && success()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to test environment
      run: |
        echo "Deploying to test environment..."
        # Add deployment steps here
    
    - name: Run smoke tests
      run: npm run test:smoke
      env:
        TEST_ENV_URL: ${{ secrets.TEST_ENV_URL }}